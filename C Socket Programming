Server side:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <time.h>

void error(const char *msg) { perror(msg); exit(1); }

int main(int argc, char *argv[]) {
    int listenSocketFD, estConnectionFD, portNum, charsRead;
    socklen_t sizeOfClientInfo;
    struct sockaddr_in serverAddr, clientAddr;
    int randomNum;

    if (argc < 2) { fprintf(stderr,"USAGE: %s port\n", argv[0]); exit(1); }

    // Set up the address struct
    memset((char *)&serverAddr, '\0', sizeof(serverAddr));
    portNum = atoi(argv[1]);
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(portNum);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    listenSocketFD = socket(AF_INET, SOCK_STREAM, 0);
    if (listenSocketFD < 0) error("ERROR opening socket");

    if (bind(listenSocketFD, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0)
        error("ERROR on binding");
    listen(listenSocketFD, 5);

    sizeOfClientInfo = sizeof(clientAddr);
    estConnectionFD = accept(listenSocketFD, (struct sockaddr *)&clientAddr, &sizeOfClientI>
    if (estConnectionFD < 0) error("ERROR on accept");

    srand(time(NULL));
    randomNum = rand() % 900 + 100;

    charsRead = send(estConnectionFD, &randomNum, sizeof(int), 0);
    if (charsRead < 0) error("ERROR writing to socket");
    
    close(estConnectionFD);
    close(listenSocketFD);



Client side:

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <time.h>

void error(const char *msg) { perror(msg); exit(0); }

int main(int argc, char *argv[])
{
    int socketFD, portNum, charsRead;
    struct sockaddr_in serverAddr;
    struct hostent* serverHostInfo;
    int randomNum;

    if (argc < 3) { fprintf(stderr,"USAGE: %s hostname port\n", argv[0]); exit(0); }

    // Set up the server address struct
    memset((char*)&serverAddr, '\0', sizeof(serverAddr));
    portNum = atoi(argv[2]);
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(portNum);
    serverHostInfo = gethostbyname(argv[1]);
    if (serverHostInfo == NULL) { fprintf(stderr, "CLIENT: ERROR, no such host\n"); exit(0);>
    memcpy((char*)&serverAddr.sin_addr.s_addr, (char*)serverHostInfo->h_addr, serverHostInfo>

    socketFD = socket(AF_INET, SOCK_STREAM, 0);
    if (socketFD < 0) error("CLIENT: ERROR opening socket");

    if (connect(socketFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0)
        error("CLIENT: ERROR connecting");

    charsRead = recv(socketFD, &randomNum, sizeof(int), 0);
    if (charsRead < 0) error("CLIENT: ERROR reading from socket");
    printf("Random Number from Server: %d\n", randomNum);

    close(socketFD);
    return 0;
}

